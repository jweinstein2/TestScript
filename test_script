#!/bin/bash

# TestScript for Git supported collaborative testing
# Code by Jared Weinstein & Dennis Duan

ASSIGNMENT=2
NAME="Parse"
LOCAL="./$NAME"
STAN="/c/cs323/Hwk$ASSIGNMENT/$NAME"
MYDIR="$(dirname "$(realpath "$0")")/tests"
START=$(date +%s%N);

i=0
failed=0
passed=0

##
apply_shell_expansion() {
    declare file="$1"
    declare data=$(< "$PROG")
    declare delimiter="__apply_shell_expansion_delimiter__"
    declare command="cat <<$delimiter"$'\n'"$PROG"$'\n'"$delimiter"
    eval "$command"
}

##Add flag to test for speed as well
if [[ "$1" = "-"*"r"* ]]
then
	shouldPrintResults=1
else
	shouldPrintResults=0
fi

if [[ "$1" = "-"*"t"* ]]
then
	shouldPrintTests=1
else
	shouldPrintTests=0
fi

if [[ "$1" = "-"*"n"* ]]
then
	testsToPrint="-"
	for var in "$@"
	do
		if [[ "$var" = [0-9]* ]]
		then
    		testsToPrint+="$var-"
    	elif [[ "$var" != "-"* ]]
    	then
    		echo "invalid test number: $var"
    	fi
	done
else
	testsToPrint="ALL"
fi

echo "====== Testing ========"


## Test all the normal tests to see if output matches provided answer
while read line           
do
	if [[ $line != "#"* ]]
	then
		PROG=$STAN
		#echo "TESTING"
		#echo $(apply_shell_expansion $line)
		#error="$(eval $(apply_shell_expansion $line) 2>&1 1>/dev/null)"
		#echo $error
		#echo "END TEST"
		if [[ -z $error ]]
		then
			## Normal check for test case
			# Check and fail if the users program prints to stderr
			((i=i+1))
			if [[ "$testsToPrint" == "ALL" ]] || [[ "$testsToPrint" = *"-$i-"* ]]
			then
				PROG=$LOCAL
				#myAns=$(eval "valgrind $line > /dev/null 2>&1")
				myAns=$(eval "valgrind -q $line")
				# > redirects the output of error log and program to bit bucket
				PROG=$STAN  
				#stanAns=$(eval "$line > /dev/null 2>&1")
				stanAns=$(eval "$line")

				if [ "$myAns" = "$stanAns" ]
				then
					((passed=passed+1))
					if [ $shouldPrintTests = 1 ]
					then
						echo "✓ | Test$i: $line"
					else
						echo "✓ | Test$i"
					fi
				else
					((failed=failed+1))
					echo "× | Test$i Failed : $line"
					if [ $shouldPrintResults = 1 ]
					then
						echo "=============== Failed test results =================="
						(PROG=$LOCAL; echo $line)
						echo "Your output  : $myAns"
						echo "Stan's Output: $stanAns"
						echo "======================================================"
					fi
				fi
			fi
		else
			#Fail Graceful
			echo "fail gracefully"
			## TODO : FAIL GRACEFULLY CHECK
			## TODO : add a time function (perhaps do 1.5 times his program)
			# SEE IF HIS PROGRAM HAS A STDERR OUTPUT
		fi
	fi
done <$MYDIR

## FINAL DATA ## 

echo "==== Final Results ===="
echo "  passed - $passed"
echo "  failed - $failed"

END=$(date +%s%N)
diff=$(( END-START ))
timer=$(bc <<< "scale=7; $diff/1000000000")

if [[ "$1" = "-"*"l"* ]]
then
	if [ $failed = 0 ]
	then
		cd /home/accts/jtw37/leaderboard
		who=$(whoami)
		/home/accts/jtw37/leaderboard/Add "$who" "$timer" #> /dev/null 2>&1
	fi
fi
