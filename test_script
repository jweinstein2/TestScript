#!/bin/bash

# TestScript for Git supported collaborative testing
# Code by Jared Weinstein & Dennis Duan

ASSIGNMENT=4
NAME="Merge16"
LOCAL="./$NAME"
STAN="/c/cs223/Hwk$ASSIGNMENT/$NAME"
MYDIR="$(dirname "$(realpath "$0")")/tests"
START=$(date +%s%N);

i=0
failed=0
passed=0

##I eventually want to be able to specify specific test numbers as well
if [[ "$1" = "-"*"r"* ]]
then
	shouldPrintResults=1
else
	shouldPrintResults=0
fi

if [[ "$1" = "-"*"t"* ]]
then
	shouldPrintTests=1
else
	shouldPrintTests=0
fi

if [[ "$1" = "-"*"n"* ]]
then
	testsToPrint="-"
	for var in "$@"
	do
		if [[ "$var" = [0-9]* ]]
		then
    		testsToPrint+="$var-"
    	elif [[ "$var" != "-"* ]]
    	then
    		echo "invalid test number: $var"
    	fi
	done
else
	testsToPrint="ALL"
fi

echo "====== Testing ========"


## Test all the normal tests to see if output matches provided answer
while read line           
do
	if [[ $line != "#"* ]]
	then
		if [[ $line == "??"* ]] ##Change this line to see if he has stderr
		then
			echo "fail gracefully"
			## TODO : FAIL GRACEFULLY CHECK
			## TODO : add a time function (perhaps do 1.5 times his program)
			# SEE IF HIS PROGRAM HAS A STDERR OUTPUT
			#No valgrind errors ... no infinite loop ... check stderr output? 
			##check that they both print to stderr
		else
			## Normal check for test case
			# Check and fail if the users program prints to stderr
			((i=i+1))
			if [[ "$testsToPrint" == "ALL" ]] || [[ "$testsToPrint" = *"-$i-"* ]]
			then
				PROG=$LOCAL
				#myAns=$(eval "valgrind $line > /dev/null 2>&1")
				myAns=$(eval "valgrind -q $line")
				# > redirects the output of error log and program to bit bucket
				PROG=$STAN  
				#stanAns=$(eval "$line > /dev/null 2>&1")
				stanAns=$(eval "$line")

				if [ "$myAns" = "$stanAns" ]
				then
					((passed=passed+1))
					if [ $shouldPrintTests = 1 ]
					then
						echo "✓ | Test$i: $line"
					else
						echo "✓ | Test$i"
					fi
				else
					((failed=failed+1))
					echo "× | Test$i Failed : $line"
					if [ $shouldPrintResults = 1 ]
					then
						echo "=============== Failed test results =================="
						(PROG=$LOCAL; echo $line)
						echo "Your output  : $myAns"
						echo "Stan's Output: $stanAns"
						echo "======================================================"
					fi
				fi
			fi
		fi
	fi
done <$MYDIR

## Test all the failed gracefully test cases
#while read line
#do
#	if [[ $line != "#"* ]]
#	then
#		((i=i+1))
#		#Check the local test for graceful failure
#		PROG=$LOCAL
#		myAns=$(eval "valgrind -q $line")
#	fi
#done  <$MYDIR

echo "==== Final Results ===="
echo "  passed - $passed"
echo "  failed - $failed"

END=$(date +%s%N)
timer=$((END-START)) | awk '{print int($1/60)":"int($1%60)}'
echo "$timer"

if [ $failed = 0 ]
then
	who=$(eval "whoami")
	/home/accts/jtw37/leaderboard/Add "$who" "$timer"
fi
